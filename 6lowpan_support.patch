diff -U 3 -H -d -r -N -- lowpan-tools-git20111103_orig/include/nl802154.h lowpan-tools-git20111103_6lowpan_aur/include/nl802154.h
--- lowpan-tools-git20111103_orig/include/nl802154.h	2011-11-08 14:50:01.000000000 +0100
+++ lowpan-tools-git20111103_6lowpan_aur/include/nl802154.h	2011-11-09 14:32:04.000000000 +0100
@@ -131,6 +131,7 @@
 	IEEE802154_DEV_WPAN,
 	IEEE802154_DEV_MONITOR,
 	IEEE802154_DEV_SMAC,
+	IEEE802154_DEV_6LOWPAN,
 	__IEEE802154_DEV_MAX,
 };
 
diff -U 3 -H -d -r -N -- lowpan-tools-git20111103_orig/src/iz-phy.c lowpan-tools-git20111103_6lowpan_aur/src/iz-phy.c
--- lowpan-tools-git20111103_orig/src/iz-phy.c	2011-11-08 14:50:01.000000000 +0100
+++ lowpan-tools-git20111103_6lowpan_aur/src/iz-phy.c	2011-11-09 14:32:04.000000000 +0100
@@ -201,6 +201,72 @@
 	{},
 };
 
+/******************
+ *  6lowpan handling  *
+ ******************/
+
+static iz_res_t lowpan_phy_parse(struct iz_cmd *cmd)
+{
+	if (cmd->argc < 2 || cmd->argc > 4) {
+		printf("Incorrect number of arguments!\n");
+		return IZ_STOP_ERR;
+	}
+
+	cmd->phy = cmd->argv[1];
+	cmd->iface = cmd->argv[2]; /* Either iface name or NULL */
+
+	return IZ_CONT_OK;
+}
+
+static iz_res_t lowpan_phy_request(struct iz_cmd *cmd, struct nl_msg *msg)
+{
+	unsigned char hwa[IEEE802154_ADDR_LEN];
+
+	/* add single interface */
+	NLA_PUT_STRING(msg, IEEE802154_ATTR_PHY_NAME, cmd->phy);
+	if (cmd->iface)
+		NLA_PUT_STRING(msg, IEEE802154_ATTR_DEV_NAME, cmd->iface);
+
+	NLA_PUT_U8(msg, IEEE802154_ATTR_DEV_TYPE, IEEE802154_DEV_6LOWPAN);
+
+	if (cmd->argc >= 4) {
+		int ret = parse_hw_addr(cmd->argv[3], hwa);
+		if (ret) {
+			printf("Bad coordinator address!\n");
+			return IZ_STOP_ERR;
+		}
+		NLA_PUT(msg, IEEE802154_ATTR_HW_ADDR,
+			IEEE802154_ADDR_LEN, hwa);
+	}
+
+	return IZ_CONT_OK;
+
+nla_put_failure:
+	return IZ_STOP_ERR;
+
+}
+
+static iz_res_t lowpan_phy_response(struct iz_cmd *cmd, struct genlmsghdr *ghdr, struct nlattr **attrs)
+{
+	if (!attrs[IEEE802154_ATTR_DEV_NAME] ||
+	    !attrs[IEEE802154_ATTR_PHY_NAME])
+		return IZ_STOP_ERR;
+
+	printf("Registered new device ('%s') on phy %s\n",
+			nla_get_string(attrs[IEEE802154_ATTR_DEV_NAME]),
+			nla_get_string(attrs[IEEE802154_ATTR_PHY_NAME]));
+
+	return IZ_STOP_OK;
+}
+
+static struct iz_cmd_event lowpan_phy_response_event[] = {
+	{
+		.call = lowpan_phy_response,
+		.nl = IEEE802154_ADD_IFACE,
+	},
+	{},
+};
+
 /********************
  * MONITOR handling *
  ********************/
@@ -333,6 +399,15 @@
 		.response	= add_phy_response_event,
 	},
 	{
+		.name		= "6lowpan",
+		.usage		= "phy [name [hwaddr]]",
+		.doc		= "Add a 6LOWPAN interface attached to specified phy.",
+		.nl_cmd		= IEEE802154_ADD_IFACE,
+		.parse		= lowpan_phy_parse,
+		.request	= lowpan_phy_request,
+		.response	= lowpan_phy_response_event,
+	},
+	{
 		.name		= "monitor",
 		.usage		= "phy [name]",
 		.doc		= "Add monitoring interface, passing all received frames.",
diff -U 3 -H -d -r -N -- lowpan-tools-git20111103_orig/test-serial/test_DQ.py lowpan-tools-git20111103_6lowpan_aur/test-serial/test_DQ.py
--- lowpan-tools-git20111103_orig/test-serial/test_DQ.py	2011-11-08 14:50:01.000000000 +0100
+++ lowpan-tools-git20111103_6lowpan_aur/test-serial/test_DQ.py	2011-11-10 12:10:09.000000000 +0100
@@ -45,8 +45,8 @@
 
 		try:
 			self.oldattrs = tcgetattr(self.file)
-			attrs = [IGNPAR, self.oldattrs[1], 0, 0, B115200, B115200, self.oldattrs[6]]
-			attrs[2] = B115200 | CS8 | CLOCAL | CREAD
+			attrs = [IGNPAR, self.oldattrs[1], 0, 0, B230400, B230400, self.oldattrs[6]]
+			attrs[2] = B230400 | CS8 | CLOCAL | CREAD
 			attrs[6][VTIME] = 0
 			attrs[6][VMIN] = 1
 			tcflush(self.file, TCIFLUSH)
@@ -162,7 +162,7 @@
 		while 1:
 			v = self.__response()
 			if (v != 0x8b) :
-				print "Returned invalid id value %x" % (v)
+				print "Returned invalid rid value %x" % (v)
 			else:
 				break
 		return self.status
